


Esta linha importa a classe Pattern da biblioteca java.util.regex, usada para trabalhar com expressões regulares.
import java.util.regex.Pattern;

Declaração da classe pública PasswordValidator.
public class PasswordValidator {


   	Constantes para os caracteres especiais e padrões de expressões regulares.

	Estas linhas definem constantes usadas para verificar diferentes aspectos da senha:







    SPECIAL_CHARACTERS: Armazena todos os caracteres especiais considerados válidos.
    private static final String SPECIAL_CHARACTERS = "!@#$%^&*()-+";

    DIGIT_PATTERN: Expressão regular para verificar se a senha contém pelo menos um dígito.
    private static final Pattern DIGIT_PATTERN = Pattern.compile(".*[0-9].*");

    LOWERCASE_PATTERN: Expressão regular para verificar se a senha contém pelo menos uma letra minúscula.
    private static final Pattern LOWERCASE_PATTERN = Pattern.compile(".*[a-z].*");

    UPPERCASE_PATTERN: Expressão regular para verificar se a senha contém pelo menos uma letra maiúscula.
    private static final Pattern UPPERCASE_PATTERN = Pattern.compile(".*[A-Z].*");

    SPECIAL_PATTERN: Expressão regular para verificar se a senha contém pelo menos um caractere especial.
    private static final Pattern SPECIAL_PATTERN = Pattern.compile(".*[" + SPECIAL_CHARACTERS + "].*");

    WHITESPACE_PATTERN: Expressão regular para verificar se a senha contém espaços em branco.
    private static final Pattern WHITESPACE_PATTERN = Pattern.compile(".*\\s.*");



    Método estático que determina se uma senha é válida com base em critérios definidos.
    Este método público verifica se uma senha é válida de acordo com os requisitos especificados.
    public static boolean isValid(String password) {
        

      Verifica se a senha é nula, vazia, contém espaços ou é mais curta que 9 caracteres.
        password == null: Checa se a senha é nula.
	password.isEmpty(): Checa se a senha está vazia.
	WHITESPACE_PATTERN.matcher(password).matches(): Verifica se a senha contém espaços em branco usando a expressão regular 	WHITESPACE_PATTERN.
	password.length() < 9: Checa se a senha tem menos de 9 caracteres.
	Se qualquer uma dessas condições for verdadeira, a função retorna false indicando que a senha é inválida.
        if (password == null || password.isEmpty() || WHITESPACE_PATTERN.matcher(password).matches()
                || password.length() < 9) {
            return false;
        }

        
     if (!DIGIT_PATTERN.matcher(password).matches(): Nega a expressão regular para checar se a senha não contém dígitos.
     !LOWERCASE_PATTERN.matcher(password).matches(): Nega a expressão regular para checar se a senha não contém letras minúsculas.
     !UPPERCASE_PATTERN.matcher(password).matches(): Nega a expressão regular para checar se a senha não contém letras maiúsculas.
     !SPECIAL_PATTERN.matcher(password).matches(): Nega a expressão regular para checar se a senha não contém caracteres especiais.
      hasRepeatedCharacters(password): Chama a função hasRepeatedCharacters para verificar se há caracteres repetidos.
return false:
    Se qualquer uma dessas condições for verdadeira, a função retorna false indicando que a senha é inválida.

    
        }

        // Retorna true se todos os critérios forem atendidos.
        return true;
    }

    // Método privado auxiliar para verificar a presença de caracteres repetidos na senha.
    private static boolean hasRepeatedCharacters(String password) {

        // charCounts: Um array que armazena a contagem de ocorrências de cada caractere

        int[] charCounts = new int[Character.MAX_VALUE + 1];
        for (int i = 0; i < password.length(); i++) {
            char c = password.charAt(i);
            // Se um caractere for encontrado mais de uma vez, retorna true.
            if (charCounts[c]++ > 0) {
                return true;
            }
        }
        // Retorna false se não houver caracteres repetidos.
        return false;
    }
}
